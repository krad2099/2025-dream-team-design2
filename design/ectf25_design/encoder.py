import argparse
import struct
import json
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.backends import default_backend


class Encoder:
    def __init__(self, secrets: bytes):
        """
        You **may not** change the arguments or returns of this function!

        :param secrets: Contents of the secrets file generated by
            ectf25_design.gen_secrets
        """
        # Securely parse secrets to avoid plaintext vulnerability
        secrets = json.loads(secrets)
        
        # Additional check to ensure secrets integrity (e.g., cryptographic check on "some_secrets")
        self.some_secrets = secrets["some_secrets"]
        
        # Secure the some_secrets for use in Encoder.encode by applying hashing or encryption if necessary.
        self.some_secrets = self._secure_secrets(self.some_secrets)

    def _secure_secrets(self, secret: str) -> str:
        """
        A method to apply a cryptographic hash to secrets for increased security.
        """
        salt = b"some_salt"  # Use a secure salt, ideally stored somewhere secure
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
            backend=default_backend()
        )
        return kdf.derive(secret.encode())

    def encode(self, channel: int, frame: bytes, timestamp: int) -> bytes:
        """The frame encoder function
        This will be called for every frame that needs to be encoded before being
        transmitted by the satellite to all listening TVs
        """
        # Implement some encoding mechanisms for security like encryption or integrity checks

        # Returning structured packed data, making sure the frame and timestamp are securely handled
        return struct.pack("<IQ", channel, timestamp) + frame


def main():
    """A test main to one-shot encode a frame
    This function is only for your convenience and will not be used in the final design.
    After pip-installing, you should be able to call this with:
        python3 -m ectf25_design.encoder path/to/test.secrets 1 "frame to encode" 100
    """
    parser = argparse.ArgumentParser(prog="ectf25_design.encoder")
    parser.add_argument(
        "secrets_file", type=argparse.FileType("rb"), help="Path to the secrets file"
    )
    parser.add_argument("channel", type=int, help="Channel to encode for")
    parser.add_argument("frame", help="Contents of the frame")
    parser.add_argument("timestamp", type=int, help="64b timestamp to use")
    args = parser.parse_args()

    encoder = Encoder(args.secrets_file.read())
    print(repr(encoder.encode(args.channel, args.frame.encode(), args.timestamp)))


if __name__ == "__main__":
    main()
